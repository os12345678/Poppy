struct TreeNode {
  capability read elemKey, local elemVal, local elemNull, local otherNodes;
  var int key : elemKey;
  var int value : elemVal;
  var bool isNull : elemNull;
  var TreeNode parent : otherNodes;
  var TreeNode leftChild : otherNodes;
  var TreeNode rightChild : otherNodes;
}

struct BinarySearchTree {
  capability local Root, read ErrorCode;
  var TreeNode mRoot : Root;
  var int errorCode : ErrorCode;
}

trait BinaryTreeOps{
    nodeWithKey : Root (int k) -> TreeNode
    isNull : Root (TreeNode node) -> bool
    isNonNull : Root (TreeNode node) -> bool
    getKey : Root(TreeNode node) -> int
    getNodeLeftChild : Root (TreeNode node) -> TreeNode
    getNodeRightChild : Root (TreeNode node) -> TreeNode
    setNodeParent : Root(TreeNode node, TreeNode newVal) -> TreeNode
    setNodeLeftChild : Root(TreeNode node, TreeNode newVal) -> TreeNode
    setNodeRightChild : Root(TreeNode node, TreeNode newVal) -> TreeNode
    printNode : Root(TreeNode node) -> void
    min : Root, ErrorCode () -> int
    max : Root, ErrorCode () -> int
    predecessor : Root, ErrorCode (int k) -> int
    successor : Root, ErrorCode (int k) -> int
    insert : Root (int k, int v)  -> void
    delete : Root, ErrorCode (int k) -> void
    isEmpty : Root() -> bool
    hasKey : Root, ErrorCode (int k) -> bool
    chooseAny : Root, ErrorCode () -> int
    size : Root, ErrorCode () -> int
    inOrderTraversal : Root, ErrorCode () -> void
    depth : Root (TreeNode currentNode) -> int
}

impl BinaryTreeOps for BinarySearchTree {

    nodeWithKey : Root (int k) -> TreeNode {
    let currentNode = this.mRoot;
        while (this.isNonNull(currentNode) && (k != (currentNode.key))) {
            // compare with the current node's key
            if (k < (currentNode.key)) {  // go down left subtree
            currentNode := currentNode.leftChild
        } else {  // k must be in right subtree if it is in tree
            currentNode := currentNode.rightChild
            }
        };
    currentNode
    }

    isNull : Root (TreeNode node) -> bool{
        node.isNull
    }
    
    isNonNull : Root (TreeNode node) -> bool{
        !(node.isNull)
    }

    getKey : Root(TreeNode node) -> int{
        node.key
    }

    getNodeLeftChild : Root (TreeNode node) -> TreeNode{
        if(node.isNull){
            node // null implies we're a leaf, so return a null node
        }  
        else{
            node.leftChild
        }
    }

    getNodeRightChild : Root (TreeNode node) -> TreeNode{
        if(node.isNull){
            node // null implies we're a leaf, so return a null node
        }  
        else{
            node.rightChild
        }
    }

    setNodeParent : Root(TreeNode node, TreeNode newVal) -> TreeNode{
        node.parent := newVal
    }

    setNodeLeftChild : Root(TreeNode node, TreeNode newVal) -> TreeNode{
        node.leftChild := newVal
    }

    setNodeRightChild : Root(TreeNode node, TreeNode newVal) -> TreeNode{
        node.rightChild := newVal
    }

    printNode : Root(TreeNode node) -> void{
        print("(k: %d, v: %d)\n", node.key, node.value)
    }

    min : Root, ErrorCode () -> int {
        if(this.isEmpty()) {
            this.errorCode
        }
        else{
            let currentNode = this.mRoot;
            // keep following left child until we reach leaf
            while (this.isNonNull(currentNode.leftChild)) {
            currentNode:= currentNode.leftChild
            };
            currentNode.key
        }
    }

    max : Root, ErrorCode () -> int {
        if (this.isEmpty()) {
            this.errorCode  // no max since tree is empty
        } else {
            let currentNode = this.mRoot;
            // keep following right child until we reach leaf
            while (this.isNonNull(currentNode.rightChild)) {
            currentNode := currentNode.rightChild
        };
        currentNode.key
        }
    }

    predecessor : Root, ErrorCode (int k) -> int{
        let currentNode = this.nodeWithKey(k);
        // if currentNode is null then there's no key
        if ((currentNode.isNull) || ((this.min()) == (k))) {  // check if k is min element of tree
            // if so, we have violated a pre-condition of predecessor()
            this.errorCode  // so no predecessor
        } else {
            // now we know there is a valid predecessor, let us find it.
            let predint = this.errorCode;

            // case 1: node with key k has a left subtree, in which case get max
            // element of left subtree
            if (this.isNonNull(currentNode.leftChild)) {
                let leftSubtree =
                    new BinarySearchTree(mRoot : currentNode.leftChild, 
                                    errorCode: this.errorCode);
                predint := leftSubtree.max()
            } 

            // case 2: an ancestor of the node is k's predecessor. so traverse with
            // sketch below:
            // pred
            //   \
                    //   /
            //  /
            // /
            // k
            // we need to go up the tree until key of ancestor(node)< k
            // this is the case since k = min element of pred's right subtree, i.e k
            // is pred's successor
            else {
                let leftParentNode = this.getNodeLeftChild(currentNode.parent);

                while ( (leftParentNode.key) == (currentNode.key)) {
                currentNode := currentNode.parent
                };
                predint := this.getKey(currentNode.parent)
            };
        predint
        }
    }

    successor : Root, ErrorCode (int k) -> int{
        // this is the mirror image of predecessor

        let currentNode = this.nodeWithKey(k); 
        // if currentNode is null that means the key doesn't exist
        if ( (currentNode.isNull) || ((this.max()) == (k)) ) {  // check if k is max element of tree
            // if so, we have violated a pre-condition of successor()
            this.errorCode  // so no successor
      
        } else {
        // now we know there is a valid successor, let us find it.
        let succint = this.errorCode;
        // case 1: node with key k has a right subtree, in which case get min
        // element of right subtree
            if (this.isNonNull(currentNode.rightChild)) {
                let rightSubTree = new BinarySearchTree(mRoot: currentNode.rightChild, errorCode: this.errorCode);
                succint := rightSubTree.min()
            }

            // case 2: an ancestor of the node is k's successor. so traverse with sketch
            // below:
            // succ
            //   /
            //   \
                //    \
                //     \
                //      k
            // we need to go up the tree until key of ancestor(node)> k
            // this is the case since k = max element of succ's left subtree, i.e k is
            // succ's predecessor
            else {
                let rightParentNode = this.getNodeRightChild(currentNode.parent);
                while ((rightParentNode.key) == (currentNode.key)) {
                    currentNode := currentNode.parent
                };
                succint := this.getKey(currentNode.parent)
            };
            succint
        }
    }

    insert : Root (int k, int v) -> void {
        let currentNode = this.mRoot;
        let parentNode = new TreeNode(isNull:true);  // parent of current node
        while ((this.isNonNull(currentNode)) && ( (k != (currentNode.key)))) {  
            if (k < (currentNode.key)) {  // k< current node key so go down left subtree
                parentNode := currentNode;
                currentNode := currentNode.leftChild
            } else {  // k> current node key so go down right subtree
                parentNode := currentNode;
                currentNode := currentNode.rightChild
            }
        };

        if ((k) == (currentNode.key)){ // Case 1: key is already present so overwrite the value
            currentNode.isNull := false;
            currentNode.value := v;
            currentNode // return this so types are consistent
        } else {
            // we've reached bottom of tree so insert as leaf
            let newNode = new TreeNode(key: k, value: v, isNull: false, leftChild: new TreeNode( isNull:true ), rightChild: new TreeNode( isNull:true ));

            if (parentNode.isNull) {  // Case 2: tree is empty
                this.mRoot := newNode
            }
            // Case 3:we have a parent node so we update newNode as the parent node's
            // left or right child, depending on key
            else {
                newNode.parent := parentNode;
                if (k < (parentNode.key)) {
                    parentNode.leftChild := newNode

                } else {
                    parentNode.rightChild := newNode
                }
            }
        }
    }

    delete : Root, ErrorCode (int k) -> void{
        let currentNode = this.nodeWithKey(k); 
        if (currentNode.isNull){ // nothing to delete
            currentNode // just to make types consistent
        }
        else {
            // Case 1: if node has at most one subtree, we just shift this up
            if ((this.isNull(currentNode.leftChild)) || (this.isNull(currentNode.rightChild))) {
                if (this.isNull(currentNode.leftChild)) {
                    // splice out node and update pointers
                    this.setNodeParent(currentNode.rightChild,currentNode.parent);
                    let thisRoot = this.mRoot;
                    if (currentNode.key == (thisRoot.key)) {
                        this.mRoot := currentNode.rightChild
                    } else {
                        let leftChildParent = this.getNodeLeftChild(currentNode.parent);
                        if ( (leftChildParent.key) == (currentNode.key)) {
                            this.setNodeLeftChild(currentNode.parent,currentNode.rightChild)
                        } else {
                            this.setNodeRightChild(currentNode.parent,currentNode.rightChild)
                        }
                    }
                } else {
                    this.setNodeParent(currentNode.leftChild,currentNode.parent);
                    let thisRoot = this.mRoot;
                    if (currentNode.key == (thisRoot.key)) {
                        this.mRoot := currentNode.rightChild
                    } else {
                        // splice out node and update pointers
                        let leftChildParent = this.getNodeLeftChild(currentNode.parent);
                        if ( (leftChildParent.key) == (currentNode.key)) {
                            this.setNodeLeftChild(currentNode.parent,currentNode.leftChild)
                        } else {
                            this.setNodeRightChild(currentNode.parent,currentNode.leftChild)
                        }
                    }
                }
            }
            // Case 2: node has both subtrees, so its successor lies in right subtree
            // we swap node with its successor, then delete it
            // For ease of implementation, we will do this by deleting successor from
            // tree, then swapping it into the original node's position.

            else {
                let succNode = this.nodeWithKey(this.successor(k));
                // note successor has no left subtree so case 1 applies
                this.setNodeParent(succNode.rightChild,succNode.parent);
                let leftChildSuccessor = this.getNodeLeftChild(succNode.parent);
                if ( (leftChildSuccessor.key) == (succNode.key)) {
                    this.setNodeLeftChild(succNode.parent,succNode.rightChild)
                } else {
                    this.setNodeRightChild(succNode.parent,succNode.rightChild)
                };

                // next let us swap succNode into currentNode's position by updating pointers
                // first the parent node
                succNode.parent := currentNode.parent;
                let thisRoot = this.mRoot;
                if (currentNode.key == (thisRoot.key)) {
                    this.mRoot := succNode
                } else {  // i.e. if currentNode has a parent (i.e. not root)
                    let leftChildParent = this.getNodeLeftChild(currentNode.parent);
                    if ( (leftChildParent.key) == (currentNode.key)) {
                        this.setNodeLeftChild(currentNode.parent,succNode)
                    } else {
                        this.setNodeRightChild(currentNode.parent,succNode);
                        succNode // just to keep types of branches consistent
                    };

                // next, the children
                succNode.leftChild := currentNode.leftChild;

                succNode.rightChild := currentNode.rightChild;
                this.setNodeParent(currentNode.rightChild, succNode)
                }
            }
        }
    }

    isEmpty : Root () -> bool {  (this.isNull(this.mRoot)) }

    hasKey : Root, ErrorCode (int k) -> bool {
        let node = this.nodeWithKey(k);
        this.isNonNull(node)
    }

    chooseAny : Root, ErrorCode () -> int {
        if (this.isEmpty()) {
            this.errorCode
        }
        else{
            this.getKey(this.mRoot)  // return the root's key for simplicity's sake
        }
    }

    size : Root, ErrorCode () -> int {
        if (!(this.isEmpty())) {
            // recursively count the left and right subtrees if they exist
            let leftSubtree = new BinarySearchTree(mRoot: this.getNodeLeftChild(this.mRoot) , errorCode: this.errorCode);
            let rightSubTree = new BinarySearchTree(mRoot: this.getNodeRightChild(this.mRoot) , errorCode: this.errorCode);
            1 + ((leftSubtree.size())+ (rightSubTree.size()))  
     
        } else {
            0
        }

    }

    /*
    This implementation prints nodes when doing an inorder traversal. 
    */
    inOrderTraversal : Root, ErrorCode () -> void {
        // visit left subtree first, then node, then right subtree
        // Postorder: visit L then R then node itself
        // Preorder: visit node then L then R
        if (!(this.isEmpty())) {
            // recursively count the left and right subtrees if they exist
            let leftSubtree = new BinarySearchTree(mRoot: this.getNodeLeftChild(this.mRoot) , errorCode: this.errorCode);
            let rightSubTree = new BinarySearchTree(mRoot: this.getNodeRightChild(this.mRoot) , errorCode: this.errorCode);
            leftSubtree.inOrderTraversal();
            this.printNode(this.mRoot);
            rightSubTree.inOrderTraversal()

        } else {}
    }

    // this method returns the depth of the tree
    depth : Root (TreeNode currentNode) -> int {
        if (currentNode.isNull) {
            0   // since 1 node tree has depth 0
        } else {
            let leftDepth = this.depth(currentNode.leftChild);
            let rightDepth = this.depth(currentNode.rightChild);

            let maxChildDepth = if (leftDepth > rightDepth){
                leftDepth
            } else {
                rightDepth
            };
            maxChildDepth + 1
        }
    } 
}

void main() {
    let lc = new TreeNode( isNull:true );
    let rc = new TreeNode( isNull:true );
    let root = new TreeNode(key: 1, value: 42, isNull:false, leftChild: lc, rightChild: rc);
    let tree = new  BinarySearchTree (mRoot: root, errorCode: -1);
    tree.insert(2, 32);
    tree.insert(-1, 30);
    print("Size of tree: %d\n" tree.size() );
    tree.inOrderTraversal();
    print("Min key in tree: %d\n" tree.min() );
    print("Max key in tree: %d\n" tree.max());
    tree.delete(-1);  
    tree.inOrderTraversal();
    print("Min key in tree after deleting -1: %d\n" tree.min() )
}